################
# Build pipeline
################
docker_plugin_default_config: &docker_plugin_default_config
  image: "oasislabs/testing:0.3.0"
  always_pull: true
  workdir: /workdir
  volumes:
    - /var/lib/buildkite-agent/.ssh:/root/.ssh
    - /var/lib/buildkite-agent/.coveralls:/root/.coveralls
    - /var/lib/buildkite-agent/.codecov:/root/.codecov
    # Shared Rust incremental compile caches.
    - /tmp/cargo_ic/debug:/tmp/artifacts/debug/incremental
    - /tmp/cargo_ic/debug_sgx:/tmp/artifacts/x86_64-unknown-linux-sgx/debug/incremental
    # Shared Rust package checkouts directory.
    - /tmp/cargo_pkg/git:/root/.cargo/git
    - /tmp/cargo_pkg/registry:/root/.cargo/registry
    # Shared Rust SGX standard library artifacts cache.
    - /tmp/xargo_cache:/root/.xargo
    # Shared Go package checkouts directory.
    - /tmp/go_pkg:/root/go/pkg
    # Intel SGX Application Enclave Services Manager (AESM) daemon running on
    # the Buildkite host.
    - /var/run/aesmd/aesm.socket:/var/run/aesmd/aesm.socket
  # NOTE: When changing the environment variables below, also copy the changes
  # to the docker_plugin_sgx_config.
  environment:
    - "LC_ALL=C.UTF-8"
    - "LANG=C.UTF-8"
    - "CARGO_TARGET_DIR=/tmp/artifacts"
    - "CARGO_INSTALL_ROOT=/root/.cargo"
    - "GOPROXY=https://athens.ops.oasiscloud.io/"
  propagate-environment: true
  unconfined: true

docker_plugin_sgx_config: &docker_plugin_sgx_config
  <<: *docker_plugin_default_config
  devices:
    # Intel SGX device.
    - /dev/isgx
  environment:
    - "EKIDEN_TEE_HARDWARE=intel-sgx"
    # Copy of environment variables defined in docker_plugin_default_config.
    - "LC_ALL=C.UTF-8"
    - "LANG=C.UTF-8"
    - "CARGO_TARGET_DIR=/tmp/artifacts"
    - "CARGO_INSTALL_ROOT=/root/.cargo"
    - "GOPROXY=https://athens.ops.oasiscloud.io/"


docker_plugin: &docker_plugin
  oasislabs/docker#v3.0.1-oasis1:
    <<: *docker_plugin_default_config

docker_plugin_sgx: &docker_plugin_sgx
  oasislabs/docker#v3.0.1-oasis1:
    <<: *docker_plugin_sgx_config

steps:
  ###########
  # Lint jobs
  ###########
  - label: Lint Git commits
    command: .buildkite/scripts/lint_git.sh
    plugins:
      <<: *docker_plugin

  - label: Lint Go node
    command:
      - .buildkite/scripts/setup_gitconfig.sh
      - .buildkite/go/lint_ekiden.sh
    agents:
      buildkite_agent_size: large
    plugins:
      <<: *docker_plugin

  - label: Lint Rust crate versions
    command: .buildkite/rust/lint_crate_versions.sh
    plugins:
      <<: *docker_plugin

  ############
  # Build jobs
  ############
  # This label needs to be synced with runtime-ethereum's
  # .buildkite/scripts/download_common_artifacts.sh.
  - label: Build Go node
    command:
      - .buildkite/scripts/setup_gitconfig.sh
      - .buildkite/go/build_ekiden.sh

      # Upload the built artifacts.
      - cd /workdir/go/ekiden
      - buildkite-agent artifact upload ekiden
    plugins:
      <<: *docker_plugin

  # This label needs to be synced with runtime-ethereum's
  # .buildkite/scripts/download_common_artifacts.sh.
  - label: Build Rust runtime loader
    command:
      - .buildkite/scripts/setup_gitconfig.sh
      - .buildkite/rust/build_generic.sh /workdir -p ekiden-runtime-loader
      - .buildkite/rust/build_generic.sh /workdir -p test-long-term-client
      - .buildkite/rust/build_generic.sh /workdir -p simple-keyvalue-client
      - .buildkite/rust/build_generic.sh /workdir -p simple-keyvalue-enc-client
      - .buildkite/rust/build_generic.sh /workdir -p simple-keyvalue-ops-client

      # Upload the built artifacts.
      - cd /tmp/artifacts/debug
      - buildkite-agent artifact upload ekiden-runtime-loader
      # Clients for E2E tests.
      - buildkite-agent artifact upload test-long-term-client
      - buildkite-agent artifact upload simple-keyvalue-client
      - buildkite-agent artifact upload simple-keyvalue-enc-client
      - buildkite-agent artifact upload simple-keyvalue-ops-client
    agents:
      buildkite_agent_size: large
    plugins:
      <<: *docker_plugin

  ####################
  # Runtime build jobs
  ####################
  # This label needs to be synced with runtime-ethereum's
  # .buildkite/rust/build_and_test_runtime.sh and .buildkite/scripts/download_common_artifacts.sh.
  - label: Build key manager runtime
    command:
      - .buildkite/scripts/setup_gitconfig.sh
      - .buildkite/rust/build_runtime.sh keymanager-runtime
      # The test runtime must be built here as it requires the keymanager enclave hash.
      - export KM_ENCLAVE_PATH=/tmp/artifacts/x86_64-fortanix-unknown-sgx/debug/ekiden-keymanager-runtime.sgxs
      - .buildkite/rust/build_runtime.sh tests/runtimes/simple-keyvalue

      # Upload the built artifacts.
      - cd /tmp/artifacts/x86_64-fortanix-unknown-sgx/debug
      - buildkite-agent artifact upload ekiden-keymanager-runtime.sgxs
      - buildkite-agent artifact upload simple-keyvalue.sgxs
      - cd /tmp/artifacts/debug
      - buildkite-agent artifact upload ekiden-keymanager-runtime
      - buildkite-agent artifact upload simple-keyvalue
    agents:
      buildkite_agent_size: large
    plugins:
      <<: *docker_plugin

  ###########
  # Test jobs
  ###########
  - label: Test Rust crates
    command:
      - .buildkite/scripts/setup_gitconfig.sh
      # Build storage interoperability test helpers first.
      - make -C go urkel-test-helpers
      - export EKIDEN_PROTOCOL_SERVER_BINARY=$(realpath go/storage/mkvs/urkel/interop/urkel_test_helpers)
      - .buildkite/rust/test_generic.sh .
    agents:
      buildkite_agent_size: large
    plugins:
      <<: *docker_plugin

  # Wait for all jobs defined before this point
  # to finish running in parallel before continuing.
  - wait

  #####################################
  # Test jobs requiring build artifacts
  #####################################
  - label: Test Go node
    command:
      - .buildkite/scripts/setup_gitconfig.sh
      - .buildkite/go/test_and_coverage_ekiden.sh
    plugins:
      <<: *docker_plugin

  #########################
  # Test single node config
  #########################
  - label: Test single node config
    timeout_in_minutes: 20
    command:
      - .buildkite/scripts/download_e2e_test_artifacts.sh
      - .buildkite/scripts/test_config.sh single_node
    plugins:
      <<: *docker_plugin

  ###############
  # E2E test jobs
  ###############
  - label: E2E tests (%n)
    parallelism: 10
    timeout_in_minutes: 5
    command:
      - .buildkite/scripts/download_e2e_test_artifacts.sh
      - .buildkite/scripts/test_e2e.sh
    artifact_paths:
      - e2e/*/*.log
    env:
      TEST_BASE_DIR: e2e
    agents:
      buildkite_agent_size: large
    plugins:
      <<: *docker_plugin

  - label: E2E migration tests
    timeout_in_minutes: 10
    command:
      - .buildkite/scripts/download_e2e_test_artifacts.sh
      - .buildkite/scripts/test_migration.sh
    artifact_paths:
      - e2e/*/*.log
    env:
      TEST_BASE_DIR: e2e
    agents:
      buildkite_agent_size: large
    plugins:
      <<: *docker_plugin

  ###########################
  # E2E test jobs - intel-sgx
  ###########################
  - label: E2E tests - intel-sgx (%n)
    parallelism: 6
    timeout_in_minutes: 10
    command:
      - .buildkite/scripts/download_e2e_test_artifacts.sh
      - .buildkite/scripts/test_e2e.sh
    artifact_paths:
      - e2e/*/*.log
    env:
      TEST_BASE_DIR: e2e
    agents:
      queue: intel-sgx
    plugins:
      <<: *docker_plugin_sgx

  - label: E2E migration tests - intel-sgx
    timeout_in_minutes: 15
    command:
      - .buildkite/scripts/download_e2e_test_artifacts.sh
      - .buildkite/scripts/test_migration.sh
    artifact_paths:
      - e2e/*/*.log
    env:
      TEST_BASE_DIR: e2e
    agents:
      queue: intel-sgx
    plugins:
      <<: *docker_plugin_sgx

  ####################################
  # Rust coverage job (only on master)
  ####################################

  - label: Coverage Rust crates
    branches: master
    command:
      - .buildkite/scripts/setup_gitconfig.sh
      - .buildkite/rust/coverage.sh
    agents:
      buildkite_agent_size: large
    plugins:
      <<: *docker_plugin

  ##################################
  # Deploy jobs (master and devnet2)
  ##################################

  # Wait for all jobs defined before this point
  # to finish running in parallel before continuing.
  - wait

  - label: ":rocket: Deploy image"
    trigger: ekiden-deploy-image
    async: true
    branches: master devnet2
    build:
      message: "${BUILDKITE_MESSAGE}"
      commit: "${BUILDKITE_COMMIT}"
      branch: "${BUILDKITE_BRANCH}"
