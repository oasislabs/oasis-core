/// Registers defined contract methods into the enclave contract dispatcher.
///
/// # Examples
///
/// This macro should be invoked using a concrete API generated by `contract_api` as
/// follows:
/// ```rust,ignore
/// with_api! {
///     create_contract!(api);
/// }
/// ```
#[macro_export]
macro_rules! create_contract {
    (
        $(
            pub fn $method_name:ident ( $arguments_type:ty ) -> $output_type:ty ;
        )*
    ) => {
        #[cfg(target_env = "sgx")]
        global_ctors_object! {
            ENCLAVE_CONTRACT_INIT, enclave_contract_init = {
                use ekiden_core::error::Result;
                use ekiden_trusted::contract::dispatcher::{ContractMethod,
                                                           ContractMethodDescriptor,
                                                           Dispatcher};

                // Register generated methods using the dispatcher.
                let mut dispatcher = Dispatcher::get();
                $(
                    dispatcher.add_method(
                        ContractMethod::new(
                            ContractMethodDescriptor {
                                name: stringify!($method_name).to_owned(),
                            },
                            |args: &$arguments_type| -> Result<$output_type> {
                                $method_name(args)
                            },
                        )
                    );
                )*
            }
        }
    }
}
