defaults: &defaults
  docker:
    - image: ekiden/testing:0.1.0

version: 2
jobs:
  build:
    <<: *defaults
    steps:
      # Set up
      - run: echo 'PS1='"'"'\$ '"'"'; . /root/.bashrc' >> $BASH_ENV
      - run: echo 'export SGX_MODE=SIM' >> $BASH_ENV
      - run: echo 'export INTEL_SGX_SDK=/opt/sgxsdk' >> $BASH_ENV
      - run: echo 'export EKIDEN_UNSAFE_SKIP_AVR_VERIFY=1' >> $BASH_ENV
      - run: echo 'export CARGO_BUILD_JOBS=2' >> $BASH_ENV
      - checkout

      # Check if all core crates have the same version (issue #175)
      - run:
          name: Checking if all Ekiden crates have the same version
          command: test `find . -name "Cargo.toml" -print0 | xargs -0 grep '^version = "' | cut -d'"' -f2 | sort | uniq | wc -l` == 1

      # Cargo tests. Some tests are excluded as they currently don't compile.
      # Heuristic glob to detect what test binaries that cargo builds.
      # If that gets too janky, try `cargo test --message-format=json`
      # (see
      # https://github.com/rust-lang/cargo/issues/1924#issuecomment-289770287).
      - run: |
          cargo test --all \
            --exclude ekiden-untrusted \
            --exclude ekiden-enclave-untrusted \
            --exclude ekiden-rpc-untrusted \
            --exclude ekiden-db-untrusted \
            --exclude ekiden-contract-untrusted \
            --exclude token \
            --no-run
          cd target/debug
          mkdir ../cov
          for bin in $(ls | grep '^\w\+-[0-9a-f]\{16\}$'); do
            ./$bin --test-threads 1
          done
          # XXX(willscott): coverage disabled due breakage on upgrade to 18.04
          #  mkdir ../cov/$bin
          #  kcov \
          #    --exclude-pattern=$HOME/.cargo,/usr/lib \
          #    --verify \
          #    ../cov/$bin \
          #    ./$bin \
          #    --test-threads 1
          #done
      # Upload coverage info.
      #- run: codecov

      # Cargo benchmarks. We first fetch the latest benchmark results from master and then
      # compare against them.
      - run: |
          set +e
          set +o pipefail
          wget -q -O - "https://circleci.com/api/v1.1/project/github/oasislabs/ekiden/latest/artifacts/?branch=master&circle-token=${CIRCLE_TOKEN}" | grep -o 'https://[^"]*' | xargs -P4 -I % wget -q -O /tmp/benchmarks-master.json %?circle-token=${CIRCLE_TOKEN}
      - run: |
          ./scripts/benchmark.py \
              ekiden-rpc-trusted \
              ekiden-db-trusted \
              --output /tmp/benchmarks.json \
              --compare-to /tmp/benchmarks-master.json
      - store_artifacts:
          path: /tmp/benchmarks.json
          destination: benchmarks

      # Install ekiden-tools.
      - run: cargo install --force --path tools
      # Build token contract.
      - run:
          command: cargo ekiden build-contract --output-identity
          working_directory: contracts/token
      # Run token contract tests.
      - run: cargo test -p token
      # Ensure everything is built. This needs to be after the key manager contract is built.
      - run: cargo build
      # Check style. This needs to be after everything is built.
      - run: cargo fmt -- --write-mode=check

      # Store built files.
      - persist_to_workspace:
          root: .
          paths:
            - target/debug/ekiden-node-dummy
            - target/debug/ekiden-node-dummy-controller
            - target/debug/ekiden-compute
            - target/debug/token-client
            - target/debug/test-long-term-client
            - target/contract/token.so
            - target/contract/token.mrenclave
            - tests
            - scripts

  # E2E tests.
  test_e2e:
    <<: *defaults
    steps:
      - run: echo 'PS1='"'"'\$ '"'"'; . /root/.bashrc' >> $BASH_ENV
      - attach_workspace:
          at: /workspace
      # Run tests.
      - run: /workspace/scripts/test-e2e.sh /workspace

  deploy:
    <<: *defaults
    steps:
      # Set up
      - run: echo 'PS1='"'"'\$ '"'"'; . /root/.bashrc' >> $BASH_ENV
      - run: echo 'export SGX_MODE=SIM' >> $BASH_ENV
      - run: echo 'export INTEL_SGX_SDK=/opt/sgxsdk' >> $BASH_ENV
      - run: echo 'export EKIDEN_UNSAFE_SKIP_AVR_VERIFY=1' >> $BASH_ENV
      - checkout
      - setup_remote_docker

      # Build deployment image.
      - run: BUILD_IMAGES_NO_ENTER=1 ./docker/deployment/build-images.sh
      # Push deployment image.
      - run: |
          echo "$DOCKERHUB_PASSWORD" | docker login --username "$DOCKERHUB_USERNAME" --password-stdin
          docker push oasislabs/testnet:latest
      # Update testnet.
      # https://stackoverflow.com/a/33511811/1864688
      - run: |
          REPO_DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' oasislabs/testnet:latest)
          mkdir -p ~/.kube
          echo "$KUBECONFIG_CONTENT_BASE64" | base64 -di >~/.kube/config
          kubectl set image deployments/ekiden-token-node-dummy ekiden-node-dummy=$REPO_DIGEST
          kubectl set image deployments/ekiden-token ekiden-compute=$REPO_DIGEST

workflows:
  version: 2
  build:
    jobs:
      - build
      - test_e2e:
          requires:
            - build
      - deploy:
          filters:
            branches:
              only: master
          requires:
            - build
            - test_e2e
experimental:
  notify:
    branches:
      only:
        - master
