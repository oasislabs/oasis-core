defaults: &defaults
  docker:
    - image: ekiden/testing:0.2.0

version: 2
jobs:
  build-rust:
    <<: *defaults
    resource_class: large
    steps:
      # Set up
      - run: echo 'PS1='"'"'\$ '"'"'; . /root/.bashrc' >> $BASH_ENV
      - run: echo 'export SGX_MODE=SIM' >> $BASH_ENV
      - run: echo 'export INTEL_SGX_SDK=/opt/sgxsdk' >> $BASH_ENV
      - run: echo 'export EKIDEN_UNSAFE_SKIP_AVR_VERIFY=1' >> $BASH_ENV

      - checkout
      - run:
          name: Checking if rust code has changed
          command: ./scripts/ci-changed.sh \.circleci beacon clients common compute contract contracts core db di enclave epochtime ethereum instrumentation keys node registry rpc roothash scheduler stake storage tools xargo

      # Check if all core crates have the same version (issue #175)
      - run:
          name: Checking if all Ekiden crates have the same version
          command: test `find . -name "Cargo.toml" -print0 | xargs -0 grep '^version = "' | cut -d'"' -f2 | sort | uniq | wc -l` == 1

      # Install the NPM truffle dependencies
      - run: cd ethereum && npm install

      # Cargo tests. Some tests are excluded as they currently don't compile.
      # Heuristic glob to detect what test binaries that cargo builds.
      # If that gets too janky, try `cargo test --message-format=json`
      # (see
      # https://github.com/rust-lang/cargo/issues/1924#issuecomment-289770287).
      - run: |
          cargo test --all \
            --exclude ekiden-untrusted \
            --exclude ekiden-enclave-untrusted \
            --exclude ekiden-rpc-untrusted \
            --exclude ekiden-db-untrusted \
            --exclude ekiden-contract-untrusted \
            --exclude ekiden-keymanager-untrusted \
            --exclude token \
            --no-run
          cd target/debug
          mkdir ../cov
          for bin in $(ls | grep '^\w\+-[0-9a-f]\{16\}$'); do
            mkdir ../cov/$bin
            kcov \
              --include-pattern=$HOME/project \
              --verify \
              ../cov/$bin \
              ./$bin \
              --test-threads 1
          done
      # Upload coverage info.
      - run: codecov -s target/cov -Z

      # Install ekiden-tools.
      - run: cargo install --force --path tools
      # Build token contract.
      - run:
          command: cargo ekiden build-enclave --output-identity
          working_directory: contracts/token
      # Run token contract tests.
      - run: cargo test -p token
      # Ensure everything is built. This needs to be after the key manager contract is built.
      - run: cargo build
      # Check style. This needs to be after everything is built.
      - run: cargo fmt -- --write-mode=check

      # Integration tests.
      - run: ./scripts/test-e2e.sh

      # Store built files.
      - persist_to_workspace:
          root: .
          paths:
            - target/debug/ekiden-node-dummy
            - target/debug/ekiden-node-dummy-controller
            - target/debug/ekiden-compute
            - target/debug/token-client
            - target/debug/test-long-term-client
            - target/enclave/token.so
            - target/enclave/token.mrenclave
            - ethereum/build/contracts
            - tests
            - scripts
  build-go:
    working_directory: /go/src/github.com/oasislabs/ekiden
    docker:
      - image: circleci/golang:1.10
    steps:
      - checkout
      - run:
          name: Checking if go code has changed
          command: ./scripts/ci-changed.sh \.circleci docker go
      - restore_cache:
          keys:
            - go-cache
      - run: |
          wget 'https://github.com/google/protobuf/releases/download/v3.5.1/protoc-3.5.1-linux-x86_64.zip' && \
          sudo unzip protoc-3.5.1-linux-x86_64.zip -x readme.txt -d /usr && \
          rm protoc-3.5.1-linux-x86_64.zip && \
          sudo chmod a+rx /usr/bin/protoc
      - run: |
          go get -d github.com/golang/protobuf/protoc-gen-go && \
          cd $GOPATH/src/github.com/golang/protobuf && \
          git checkout v1.0.0 && \
          cd protoc-gen-go && \
          go install
      - run: |
          go get -u github.com/alecthomas/gometalinter
          gometalinter --install
      - run: cd go && dep ensure
      - run: cd go && go generate ./...
      - run: cd go && gometalinter ./...
      - run: cd go && go build -v -o ./ekiden/ekiden ./ekiden
      - run: cd go && go test -race -coverprofile=coverage.txt -covermode=atomic -v ./...
      - run: bash <(curl -s https://codecov.io/bash) -Z
      - save_cache:
          key: go-cache
          paths:
            - "/go/pkg"

  lint-git:
    docker:
      - image: circleci/python:3.6.6
    steps:
      - checkout
      - run: sudo pip install gitlint
      # Lint Git commit messages.
      - run: gitlint --commits origin/master...HEAD

  benchmark:
    <<: *defaults
    resource_class: large
    steps:
      # Set up
      - run: echo 'PS1='"'"'\$ '"'"'; . /root/.bashrc' >> $BASH_ENV
      - run: echo 'export SGX_MODE=SIM' >> $BASH_ENV
      - run: echo 'export INTEL_SGX_SDK=/opt/sgxsdk' >> $BASH_ENV
      - run: echo 'export EKIDEN_UNSAFE_SKIP_AVR_VERIFY=1' >> $BASH_ENV
      - checkout

      # Build everything in release mode for benchmarks.
      - run: cargo build --release
      # Install ekiden-tools.
      - run: CARGO_TARGET_DIR=target cargo install --force --path tools
      # Build token contract.
      - run:
          command: cargo ekiden build-enclave --release --output-identity
          working_directory: contracts/token

      # Run all benchmarks.
      - run: |
          ./scripts/benchmark.py \
              --crate ekiden-rpc-trusted \
              --crate ekiden-db-trusted \
              --e2e \
              --commit $(git rev-parse --short HEAD)

  deploy:
    <<: *defaults
    resource_class: large
    steps:
      # Set up
      - run: echo 'PS1='"'"'\$ '"'"'; . /root/.bashrc' >> $BASH_ENV
      - run: echo 'export SGX_MODE=SIM' >> $BASH_ENV
      - run: echo 'export INTEL_SGX_SDK=/opt/sgxsdk' >> $BASH_ENV
      - run: echo 'export EKIDEN_UNSAFE_SKIP_AVR_VERIFY=1' >> $BASH_ENV
      - checkout

      # Setup version tracking environment variables
      - run: 
          name: Load docker tag versioning into environment
          command: ./scripts/determine-docker-versioning.sh /tmp/docker_tag

      # Save docker tag
      - persist_to_workspace:
          root: /tmp
          paths:
            - docker_tag

      - attach_workspace:
          at: /workspace
      - setup_remote_docker

      - run: |
          mkdir -p ~/.kube
          echo "$KUBECONFIG_CONTENT_BASE64" | base64 -di >~/.kube/config
      - run:
          name: Kubectl port forwarding
          command: kubectl port-forward service/parity 8545:8545
          background: true
      - run: cd ethereum && npm install && cp -r /workspace/ethereum/build ./build
      - run:
          name: Drive Block Mining
          command: cd ethereum && node test/web3.js http://localhost:8545/ 1000
          background: true
      - run: |
          cd ethereum && truffle migrate --network=testnet --reset | grep "ENV_" | ../docker/deployment/set-env.sh
          pkill node

      # Build deployment image.
      - run: BUILD_IMAGES_NO_ENTER=1 ./docker/deployment/build-images.sh
      # Push deployment image.
      - run: |
          echo "$DOCKERHUB_PASSWORD" | docker login --username "$DOCKERHUB_USERNAME" --password-stdin
          docker push oasislabs/testnet:$DOCKER_TAG
      # Update testnet.
      # https://stackoverflow.com/a/33511811/1864688
      - run: |
          REPO_DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' oasislabs/testnet:$DOCKER_TAG)
          kubectl set image deployments/ekiden-token-node-dummy ekiden-node-dummy=$REPO_DIGEST
          kubectl set image deployments/ekiden-token ekiden-compute=$REPO_DIGEST
  deployclient:
    <<: *defaults
    resource_class: large
    steps:
      # Set up
      - run: echo 'PS1='"'"'\$ '"'"'; . /root/.bashrc' >> $BASH_ENV
      - checkout
      - setup_remote_docker
      
      - run: 
          name: Load docker previous docker tag
          command: echo 'DOCKER_TAG=`echo /tmp/docker_tag`' >> $BASH_ENV

      # Build image.
      - run: |
          docker build --rm --force-rm -t oasislabs/transactionclient:$DOCKER_TAG -f docker/transactionclient/Dockerfile .
      # Push image.
      - run: |
          echo "$DOCKERHUB_PASSWORD" | docker login --username "$DOCKERHUB_USERNAME" --password-stdin
          docker push oasislabs/transactionclient:$DOCKER_TAG
  promote-to-production:
    <<: *defaults
    resource_class: large
    steps:
      - checkout
      - setup_remote_docker
      
      - run: 
          name: Load docker previous docker tag
          command: echo 'DOCKER_TAG=`echo /tmp/docker_tag`' >> $BASH_ENV

      # Login to docker
      - run: |
          echo "$DOCKERHUB_PASSWORD" | docker login --username "$DOCKERHUB_USERNAME" --password-stdin
      
      # Download the tag of ekiden in this current workflow
      - run: |
          docker pull oasislabs/testnet:$DOCKER_TAG

      # Update the tag to production by setting the take to latest
      - run: |
          docker push oasislabs/testnet:latest

      # Download the tag of transaction client in this current workflow
      - run: |
          docker pull oasislabs/transactionclient:$DOCKER_TAG
      
      # Update the txclient tag to production by setting the take to latest
      - run: |
          docker push oasislabs/transactionclient:latest

workflows:
  version: 2
  build:
    jobs:
      - build-rust
      - build-go
      - lint-git
      - deploy:
          requires:
            - build-rust
            - build-go
      - deployclient:
          requires:
            - build-rust
            - build-go
      - promote-to-production:
          filters:
            branches:
              only: master
          requires:
            - deploy
            - deployclient

  benchmark:
    jobs:
      - benchmark:
          filters:
            branches:
              only: master
experimental:
  notify:
    branches:
      only:
        - master
