syntax = "proto3";

// Common message definitions across services.

package common;

message Address {
    enum Transport {
        TCPv4 = 0; // TCP IPv4
        TCPv6 = 1; // TCP IPv6
    }
    Transport transport = 1;
    bytes address = 2;
    uint32 port = 3;
}

message Certificate {
    bytes der = 1;
}

message Entity {
    bytes id = 1;
    bytes eth_address = 2;
}

message Node {
    bytes id = 1;
    bytes eth_address = 2;
    bytes entity_id = 3;
    uint64 expiration = 4;
    repeated Address addresses = 5;
    Certificate certificate = 6;
    // TODO: stake should be formalized in common or consensus.
    bytes stake = 7;
}

message Signature {
    bytes pubkey = 1;
    bytes signature = 2;
}

message Contract {
    bytes id = 1;
    bytes store_id = 2;
    bytes code = 3;

    uint64 minimum_bond = 4;
    enum Mode {
        Deterministic = 0;
        Nondeterministic = 1;
    }
    Mode mode = 5;

    enum Features {
        SGX = 0;
    }
    repeated Features features = 6;

    uint64 advertisement_rate = 7;

    uint64 replica_group_size = 8;

    uint64 storage_group_size = 9;

    uint64 replica_group_backup_size = 10;

    uint64 replica_allowed_stragglers = 11;
}

service TimeSource {
  rpc GetEpoch (EpochRequest) returns (EpochResponse) {}
  rpc WatchEpochs (WatchEpochRequest) returns (stream WatchEpochResponse) {}
}

message EpochRequest {
}

message EpochResponse {
  uint64 current_epoch = 1;
  uint64 within_epoch = 2;
}

message WatchEpochRequest {
}

message WatchEpochResponse {
  uint64 current_epoch = 1;
}
