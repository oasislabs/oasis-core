syntax = "proto3";

import "common/api/src/common.proto";
import "scheduler/api/src/scheduler.proto";

package consensus;

service Consensus {
  rpc GetLatestBlock (LatestBlockRequest) returns (LatestBlockResponse) {}
  rpc GetBlocks (BlockRequest) returns (stream BlockResponse) {}
  rpc GetEvents (EventRequest) returns (stream EventResponse) {}
  rpc Commit (CommitRequest) returns (CommitResponse) {}
  rpc Reveal (RevealRequest) returns (RevealResponse) {}
  rpc CommitMany (CommitManyRequest) returns (CommitResponse) {}
  rpc RevealMany (RevealManyRequest) returns (RevealResponse) {}
}

message Block {
  Header header = 1;
  repeated scheduler.CommitteeNode computation_group = 2;
  repeated Reveal reveals = 3;
}

message Nonce {
  bytes data = 1;
}

message Commitment {
  bytes data = 1;
}

message Header {
  uint32 version = 1;
  bytes namespace = 2;
  bytes round = 3;
  bytes previous_hash = 4;
  bytes group_hash = 5;
  bytes input_hash = 6;
  bytes output_hash = 7;
  bytes state_root = 8;
  bytes reveals_hash = 9;
}

message Reveal {
  bytes data = 1;
}

message LatestBlockRequest {
  bytes contract_id = 1;
}

message LatestBlockResponse {
  Block block = 1;
}

message BlockRequest {
  bytes contract_id = 1;
}

message BlockResponse {
  Block block = 1;
}

message EventRequest {
  bytes contract_id = 1;
}

message Event {
  message CommitmentsReceived {
    bool discrepancy = 1;
  }
  message RoundFailed {
    string error = 1;
  }
  message DiscrepancyDetected {
    bytes batch_hash = 1;
  }

  oneof event {
    CommitmentsReceived commitments_received = 1;
    RoundFailed round_failed = 2;
    DiscrepancyDetected discrepancy_detected = 3;
  }
}

message EventResponse {
  Event event = 1;
}

message CommitRequest {
  bytes contract_id = 1;
  Commitment commitment = 2;
}

message CommitResponse {
}

message RevealRequest {
  bytes contract_id = 1;
  Reveal reveal = 2;
}

message RevealResponse {
}

message CommitManyRequest {
    bytes contract_id = 1;
    repeated Commitment commitments = 2;
}

message RevealManyRequest {
    bytes contract_id = 1;
    repeated Reveal reveals = 2;
}

message Content {
    oneof content {
        Commitment commitment = 1;
        Reveal reveal = 2;
        Block latest_block = 3;
    }
}
