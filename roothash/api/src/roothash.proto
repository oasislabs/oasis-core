syntax = "proto3";

package roothash;
option go_package = "github.com/oasislabs/ekiden/go/grpc/roothash";

service RootHash {
  rpc GetLatestBlock (LatestBlockRequest) returns (LatestBlockResponse) {}
  rpc GetBlocks (BlockRequest) returns (stream BlockResponse) {}
  rpc GetBlocksSince (BlockSinceRequest) returns (stream BlockResponse) {}
  rpc GetEvents (EventRequest) returns (stream EventResponse) {}
  rpc Commit (CommitRequest) returns (CommitResponse) {}
}

message Block {
  Header header = 1;
}

message Nonce {
  bytes data = 1;
}

message Commitment {
  bytes data = 1;
}

message Header {
  uint32 version = 1;
  bytes namespace = 2;
  bytes round = 3;
  uint64 timestamp = 4;
  bytes previous_hash = 5;
  bytes group_hash = 6;
  bytes input_hash = 7;
  bytes output_hash = 8;
  bytes state_root = 9;
  bytes commitments_hash = 10;
}

message GenesisBlock {
  bytes runtime_id = 1;
  Block block = 2;
}

message GenesisBlocks {
  repeated GenesisBlock genesis_blocks = 1;
}

message LatestBlockRequest {
  bytes runtime_id = 1;
}

message LatestBlockResponse {
  Block block = 1;
}

message BlockRequest {
  bytes runtime_id = 1;
}

message BlockResponse {
  Block block = 1;
}

message BlockSinceRequest {
  bytes runtime_id = 1;
  bytes round = 2;
}

message EventRequest {
  bytes runtime_id = 1;
}

message Event {
  message RoundFailed {
    string error = 1;
  }
  message DiscrepancyDetected {
    bytes batch_hash = 1;
    Header block_header = 2;
  }

  oneof event {
    RoundFailed round_failed = 1;
    DiscrepancyDetected discrepancy_detected = 2;
  }
}

message EventResponse {
  Event event = 1;
}

message CommitRequest {
  bytes runtime_id = 1;
  Commitment commitment = 2;
}

message CommitResponse {
}
